{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAmCeA,MA/Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OAEE,cADA,CACA,OAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,qBAAgBL,UAAU,gBAA1B,UACG,IACAI,IAFMC,QAMb,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gB,UCqJOC,E,4MA7FbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAMAC,IAAMC,IACd,4DAPQ,gBAIEJ,EAJF,EAGRK,KACEA,KAAQL,OAMZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAVzB,2C,kEAcVQ,KAAKN,c,+BASG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAACe,GAAD,OACV,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GA1CTE,IAAMC,WCtExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ee163e23.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    //img에서 alt와 title을 사용하는 이유는 마우스를 이미지위에 올렸을때 영화의 title이 뜨도록하기위함.\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres__genre\">\r\n              {\" \"}\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie; // 주의: 컴포넌트를 내보내기 안하면 다른 곳에서 가져오기 못함!!!\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n//사용 안함----------------------------------------------------------------------------------------------------------\nconst foodILike = [\n  {\n    id: 1,\n    name: \"Kimchi\",\n    image: \"https://www.maangchi.com/wp-content/uploads/2014/09/kimchi.jpg\",\n    rating: 5,\n  },\n  {\n    id: 2,\n    name: \"Samgyeopsal\",\n    image:\n      \"https://1.bp.blogspot.com/-pNQI_9YAcJM/VBTxavO6YMI/AAAAAAAACk4/-OHN-keA9UU/s1600/20140909_204156.jpg\",\n    rating: 5.5,\n  },\n  {\n    id: 3,\n    name: \"Bibimbap\",\n    image:\n      \"https://images.thestar.com/content/dam/thestar/life/food_wine/recipes/2010/05/04/bibimbap/bibimbap.jpeg.size-custom-crop.1086x0.jpg\",\n    rating: 4.6,\n  },\n  {\n    id: 5,\n    name: \"Doncasu\",\n    image:\n      \"https://s3-media4.fl.yelpcdn.com/bphoto/anesu6IAyAj2d6r19eFqEg/o.jpg\",\n    rating: 4,\n  },\n];\n\n// ※ Food는 컴포넌트임. 컴포넌트의 첫글자는 대문자로 작성해야함.\n// image element는 alt prop이 반드시 있어야함. 이것은 시각장애인을 위함.\nfunction Food({ name, picture, rating }) {\n  //props.fav == {favorit} 같음! 무엇을 써도 무방  // props : property의 줄임말. Food의 속성을 뜻함.\n  return (\n    <div>\n      <h2>I like {name} </h2>\n      <h4>{rating}/5.0</h4>\n      <img src={picture} alt={name} />\n    </div>\n  );\n}\n\n// Food컴포넌트의 prop들의 요구되는 형식 규정\nFood.propTypes = {\n  name: PropTypes.string.isRequired, // name 은 string형식이어야한다~ 라는 뜻.\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number, // isRequired가 붙지 않는다면 형식이 필수는 아니라는 뜻 (number 또는 undefind 가능. string 불가능)\n};\n\n/*function App() {\n  return (\n    <div>\n      {foodILike.map((dish) => (\n        <Food\n          key={dish.id}\n          name={dish.name}\n          picture={dish.image}\n          rating={dish.rating}\n        />\n      ))}\n    </div>\n  );\n}*/\n\n//-------------------------------------------------------------------------------------------------------------------\n\n// 클래스 컴포넌트. state를 가짐\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  // async: 이 함수가 비동기임을 뜻 함. 기다려야해!,  await: 무엇을 기다려야해? axios!\n  getMovies = async () => {\n    // data/data/movies를 가져와서 잡아라\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    ); //fetch() : 데이터를 보내고 받는 함수. 비슷한것으로 더 자주 사용하는 Axios라고 부르는게 있음.\n\n    this.setState({ movies, isLoading: false }); //state를 가져온 movies로 바꿔주고, 로딩도 끝났다고 바꿔준다.\n  };\n\n  componentDidMount() {\n    this.getMovies();\n\n    /*// setTimeout:  딜레이 함수\n    // 6초뒤에 isLoading = false로 변화\n     setTimeout(() => {\n      this.setState({ isLoading: false });\n    }, 6000); */\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id} //각각의 child는 항상 키값을 가져야함\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n\n  /* //컴포넌트가 맨처음 생성됐을때 한번 실행되는 함수\n  constructor(props) {\n    super(props);\n    console.log(\"hello\");\n  }\n  // add버튼을 클릭해서 state를 변경하고싶다면 setState를 사용해야함( 직접 변경X )\n  // setState를 호출하면 react는 state를 refresh하고 또한 render funtion을 호출하여 html에서 바뀐부분만(state가 바뀌었으니 state만) 다시 랜더함.\n  add = () => {\n    console.log(\"ADD\");\n    this.setState((current) => ({ count: current.count + 1 }));\n  };\n  minus = () => {\n    console.log(\"minus\");\n    this.setState((current) => ({ count: current.count - 1 }));\n  };\n  // render함수가 처음 실행된 후에 한번 호출되는 함수\n  componentDidMount() {\n    console.log(\"component render\");\n  }\n  // 업데이트가 될때마다(버튼클릭을 할 때 마다) render함수 다음으로 실행되는 함수\n  componentDidUpdate() {\n    console.log(\"I am Updated\");\n  }\n  componentWillUnmount() {\n    console.log(\"Goodbye, cruel word\");\n  }\n  render() {\n    return (\n      <div>\n        <h1> The number is: {this.state.count} </h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );\n  } */\n}\n\nexport default App;\n//--------------------------------------------------------------------------------------------------------------------\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\"; // ./ 의 의미는 같은 directory에 있다는 뜻. index.js와 app.js는 같은 src디렉토리에 있으므로 ./을 써줌!\n\n//react application은 하나의 component(ex.App, Potato 등)만을  rendering 함.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}