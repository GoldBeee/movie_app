{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","to","pathname","state","className","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","props","console","log","classname","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWAiDeA,MA5Cf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OAEE,aADA,CACC,IAAD,CACEC,GAAI,CACFC,SAAS,SAAD,OAAWP,GACnBQ,MAAO,CACLP,OACAC,QACAC,UACAC,SACAC,WARN,SAYE,sBAAKI,UAAU,QAAf,UACE,qBAAKC,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,sBAAKO,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BP,IAC9B,oBAAIO,UAAU,cAAd,SAA6BR,IAC7B,oBAAIQ,UAAU,gBAAd,SACGJ,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACV,qBAAgBL,UAAU,gBAA1B,UACG,IACAI,IAFMC,QAMb,oBAAGL,UAAU,iBAAb,UAA+BN,EAAQY,MAAM,EAAG,KAAhD,kBCoEKC,G,kNA7FbR,MAAQ,CACNS,WAAW,EACXC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAMAC,IAAMC,IACd,4DAPQ,gBAIEJ,EAJF,EAGRK,KACEA,KAAQL,OAMZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAVzB,2C,kEAcVQ,KAAKN,c,+BASG,IAAD,EACuBM,KAAKjB,MAA3BS,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAAST,UAAU,YAAnB,SACGQ,EACC,qBAAKR,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGS,EAAON,KAAI,SAACc,GAAD,OACV,cAAC,EAAD,CAEE1B,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,QANTqB,EAAM1B,e,GA1CR4B,IAAMC,Y,MCSVC,MAbf,SAAeC,GAEb,OADAC,QAAQC,IAAIF,GAEV,sBAAKG,UAAU,mBAAf,UACE,qIAIA,6DCUSC,E,kLAlBQ,IAAD,EACYV,KAAKM,MAA3BK,EADU,EACVA,SAAUC,EADA,EACAA,aAGKC,IAAnBF,EAAS5B,OACX6B,EAAQE,KAAK,O,+BAGP,IACAH,EAAaX,KAAKM,MAAlBK,SACR,OAAIA,EAAS5B,MACJ,+BAAO4B,EAAS5B,MAAMN,QAEtB,S,GAdQ0B,IAAMC,W,MCYZW,MATf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACE,cAAC,IAAD,CAAMH,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uB,MCcSmC,MAdf,WAIE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,IACxC,cAAC,IAAD,CAAO0B,KAAK,SAASE,UAAWd,IAChC,cAAC,IAAD,CAAOY,KAAK,aAAaE,UAAWT,QCb1CU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4850e451.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    //img에서 alt와 title을 사용하는 이유는 마우스를 이미지위에 올렸을때 영화의 title이 뜨도록하기위함.\r\n    <Link\r\n      to={{\r\n        pathname: `movie/${id}`,\r\n        state: {\r\n          year,\r\n          title,\r\n          summary,\r\n          poster,\r\n          genres,\r\n        },\r\n      }}\r\n    >\r\n      <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => (\r\n              <li key={index} className=\"genres__genre\">\r\n                {\" \"}\r\n                {genre}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie; // 주의: 컴포넌트를 내보내기 안하면 다른 곳에서 가져오기 못함!!!\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\n// 클래스 컴포넌트. state를 가짐\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n\r\n  // async: 이 함수가 비동기임을 뜻 함. 기다려야해!,  await: 무엇을 기다려야해? axios!\r\n  getMovies = async () => {\r\n    // data/data/movies를 가져와서 잡아라\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n    ); //fetch() : 데이터를 보내고 받는 함수. 비슷한것으로 더 자주 사용하는 Axios라고 부르는게 있음.\r\n\r\n    this.setState({ movies, isLoading: false }); //state를 가져온 movies로 바꿔주고, 로딩도 끝났다고 바꿔준다.\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n\r\n    /*// setTimeout:  딜레이 함수\r\n    // 6초뒤에 isLoading = false로 변화\r\n     setTimeout(() => {\r\n      this.setState({ isLoading: false });\r\n    }, 6000); */\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n              <Movie\r\n                key={movie.id} //각각의 child는 항상 키값을 가져야함\r\n                id={movie.id}\r\n                year={movie.year}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n\r\n  /* //컴포넌트가 맨처음 생성됐을때 한번 실행되는 함수\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"hello\");\r\n  }\r\n  // add버튼을 클릭해서 state를 변경하고싶다면 setState를 사용해야함( 직접 변경X )\r\n  // setState를 호출하면 react는 state를 refresh하고 또한 render funtion을 호출하여 html에서 바뀐부분만(state가 바뀌었으니 state만) 다시 랜더함.\r\n  add = () => {\r\n    console.log(\"ADD\");\r\n    this.setState((current) => ({ count: current.count + 1 }));\r\n  };\r\n  minus = () => {\r\n    console.log(\"minus\");\r\n    this.setState((current) => ({ count: current.count - 1 }));\r\n  };\r\n  // render함수가 처음 실행된 후에 한번 호출되는 함수\r\n  componentDidMount() {\r\n    console.log(\"component render\");\r\n  }\r\n  // 업데이트가 될때마다(버튼클릭을 할 때 마다) render함수 다음으로 실행되는 함수\r\n  componentDidUpdate() {\r\n    console.log(\"I am Updated\");\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(\"Goodbye, cruel word\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1> The number is: {this.state.count} </h1>\r\n        <button onClick={this.add}>Add</button>\r\n        <button onClick={this.minus}>Minus</button>\r\n      </div>\r\n    );\r\n  } */\r\n}\r\n\r\nexport default Home;\r\n\r\n//--------------------------------------------------------------------------------------------------------------------\r\n//사용 안함----------------------------------------------------------------------------------------------------------\r\nconst foodILike = [\r\n  {\r\n    id: 1,\r\n    name: \"Kimchi\",\r\n    image: \"https://www.maangchi.com/wp-content/uploads/2014/09/kimchi.jpg\",\r\n    rating: 5,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Samgyeopsal\",\r\n    image:\r\n      \"https://1.bp.blogspot.com/-pNQI_9YAcJM/VBTxavO6YMI/AAAAAAAACk4/-OHN-keA9UU/s1600/20140909_204156.jpg\",\r\n    rating: 5.5,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Bibimbap\",\r\n    image:\r\n      \"https://images.thestar.com/content/dam/thestar/life/food_wine/recipes/2010/05/04/bibimbap/bibimbap.jpeg.size-custom-crop.1086x0.jpg\",\r\n    rating: 4.6,\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Doncasu\",\r\n    image:\r\n      \"https://s3-media4.fl.yelpcdn.com/bphoto/anesu6IAyAj2d6r19eFqEg/o.jpg\",\r\n    rating: 4,\r\n  },\r\n];\r\n\r\n// ※ Food는 컴포넌트임. 컴포넌트의 첫글자는 대문자로 작성해야함.\r\n// image element는 alt prop이 반드시 있어야함. 이것은 시각장애인을 위함.\r\nfunction Food({ name, picture, rating }) {\r\n  //props.fav == {favorit} 같음! 무엇을 써도 무방  // props : property의 줄임말. Food의 속성을 뜻함.\r\n  return (\r\n    <div>\r\n      <h2>I like {name} </h2>\r\n      <h4>{rating}/5.0</h4>\r\n      <img src={picture} alt={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Food컴포넌트의 prop들의 요구되는 형식 규정\r\nFood.propTypes = {\r\n  name: PropTypes.string.isRequired, // name 은 string형식이어야한다~ 라는 뜻.\r\n  picture: PropTypes.string.isRequired,\r\n  rating: PropTypes.number, // isRequired가 붙지 않는다면 형식이 필수는 아니라는 뜻 (number 또는 undefind 가능. string 불가능)\r\n};\r\n\r\n/*function App() {\r\n    return (\r\n      <div>\r\n        {foodILike.map((dish) => (\r\n          <Food\r\n            key={dish.id}\r\n            name={dish.name}\r\n            picture={dish.image}\r\n            rating={dish.rating}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }*/\r\n","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props) {\r\n  console.log(props);\r\n  return (\r\n    <div classname=\"about__container\">\r\n      <span>\r\n        \"Freedom is the freedom to say that two plus two make four. If that i\r\n        granted, all else follows.\"\r\n      </span>\r\n      <span>- George Orwell, 1084</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nclass Detail extends React.Component {\r\n  componentDidMount() {\r\n    const { location, history } = this.props;\r\n\r\n    //state가 undefined라면 홈으로 리다이렉트 시킴\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n  render() {\r\n    const { location } = this.props;\r\n    if (location.state) {\r\n      return <span>{location.state.title}</span>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\n//Link는 페이지가 새로고침되어 처음부터 다시 생성되는것이 아니라 현재 페이지에 이어서 생성되게함!\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./routes/Home.css\";\nimport \"./App.css\";\n\nfunction App() {\n  //exact : 무조건 이 경로일때만 받는다!\n  //네비게이션은 라우터 안에서만 작동\n  //Link를 쓴다면 모든 <~~></>가 라우터 안에 들어가있어야함!\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\"; // ./ 의 의미는 같은 directory에 있다는 뜻. index.js와 app.js는 같은 src디렉토리에 있으므로 ./을 써줌!\n\n//react application은 하나의 component(ex.App, Potato 등)만을  rendering 함.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}